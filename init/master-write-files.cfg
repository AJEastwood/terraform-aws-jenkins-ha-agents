#cloud-config

write_files:
  - path: /etc/awslogs/awscli.conf.desired
    content: |
      [default]
      region = ${aws_region}

      [plugins]
      cwlogs = cwlogs
    permissions: "000644"
    owner: root
    group: root
  - path: /etc/awslogs/awslogs.conf
    content: |
      [general]
      state_file = /var/lib/awslogs/agent-state

      [/var/log/amazon/ssm/amazon-ssm-agent.log]
      datetime_format = %Y-%m-%d %H:%M:%S
      file = /var/log/amazon/ssm/amazon-ssm-agent.log
      log_stream_name = {instance_id}/var/log/amazon/ssm/amazon-ssm-agent.log
      log_group_name = ${master_logs}

      [/var/log/amazon/ssm/errors.log]
      datetime_format = %Y-%m-%d %H:%M:%S
      file = /var/log/amazon/ssm/errors.log
      log_stream_name = {instance_id}/var/log/amazon/ssm/errors.log
      log_group_name = ${master_logs}

      [/var/log/audit/audit.log]
      file = /var/log/audit/audit.log
      log_stream_name = {instance_id}/var/log/audit/audit.log
      log_group_name = ${master_logs}

      [/var/log/awslogs.log]
      datetime_format = %Y-%m-%d %H:%M:%S
      file = /var/log/awslogs.log
      log_stream_name = {instance_id}/var/log/awslogs.log
      log_group_name = ${master_logs}

      [/var/log/boot.log]
      file = /var/log/boot.log
      log_stream_name = {instance_id}/var/log/boot.log
      log_group_name = ${master_logs}

      [/var/log/cloud-init-output.log]
      file = /var/log/cloud-init-output.log
      log_stream_name = {instance_id}/var/log/cloud-init-output.log
      log_group_name = ${master_logs}

      [/var/log/cloud-init.log]
      datetime_format = %b %d %H:%M:%S
      file = /var/log/cloud-init.log
      log_stream_name = {instance_id}/var/log/cloud-init.log
      log_group_name = ${master_logs}

      [/var/log/cron]
      datetime_format = %b %d %H:%M:%S
      file = /var/log/cron
      log_stream_name = {instance_id}/var/log/cron
      log_group_name = ${master_logs}

      [/var/log/dmesg]
      file = /var/log/dmesg
      log_stream_name = {instance_id}/var/log/dmesg
      log_group_name = ${master_logs}

      [/var/log/grubby_prune_debug]
      file = /var/log/grubby_prune_debug
      log_stream_name = {instance_id}/var/log/grubby_prune_debug
      log_group_name = ${master_logs}

      [/var/log/maillog]
      datetime_format = %b %d %H:%M:%S
      file = /var/log/maillog
      log_stream_name = {instance_id}/var/log/maillog
      log_group_name = ${master_logs}

      [/var/log/messages]
      datetime_format = %b %d %H:%M:%S
      file = /var/log/messages
      log_stream_name = {instance_id}/var/log/messages
      log_group_name = ${master_logs}

      [/var/log/secure]
      datetime_format = %b %d %H:%M:%S
      file = /var/log/secure
      log_stream_name = {instance_id}/var/log/secure
      log_group_name = ${master_logs}

      [/var/log/yum.log]
      datetime_format = %b %d %H:%M:%S
      file = /var/log/yum.log
      log_stream_name = {instance_id}/var/log/yum.log
      log_group_name = ${master_logs}
    permissions: "000644"
    owner: root
    group: root
  - path: /etc/awslogs/config/efs.conf
    content: |
      [/var/log/amazon/efs/mount.log]
      datetime_format = %Y-%m-%d %H:%M:%S
      file = /var/log/amazon/efs/mount.log
      log_stream_name = {instance_id}/var/log/amazon/efs/mount.log
      log_group_name = ${master_logs}
    permissions: "000644"
    owner: root
    group: root
  - path: /etc/awslogs/config/jenkins-master.conf
    content: |
      [/var/log/jenkins/jenkins.log]
      datetime_format = %d %b %Y %H:%M:%S
      multi_line_start_pattern = {datetime_format}
      file = /var/log/jenkins/jenkins.log
      log_stream_name = {instance_id}/var/log/jenkins/jenkins.log
      log_group_name = ${master_logs}
    permissions: "000644"
    owner: root
    group: root
  - path: /root/plugins.txt
    content: |
      jqs-monitoring
      ant
      build-timeout
      docker-workflow
      credentials-binding
      email-ext
      envinject
      gradle
      workflow-aggregator
      ssh-slaves
      subversion
      timestamper
      ws-cleanup
      pipeline-aws
      http_request
      sonar
      pipeline-npm
      role-strategy
      blueocean
      generic-webhook-trigger
      saml
      swarm
      pipeline-maven
      leastload
      nodejs
    permissions: "000400"
    owner: root
    group: root
  - path: /opt/cloudwatch-busy-executors.sh
    content: |
      #!/bin/bash

      for i in {1..3};
      do
        AGENT_ASG="$(aws autoscaling describe-auto-scaling-groups --region ${aws_region} | jq -r '.AutoScalingGroups[] | select(.AutoScalingGroupName | startswith("${application}-agent")) | .AutoScalingGroupName')"

        BUILD_ACTIVE_QUEUE_VALUE1="$(curl -s -m 60 -u 'admin:APIKEY' 'http://localhost:8080/computer/api/json' | jq -r '.busyExecutors')"
        BUILD_ACTIVE_QUEUE_VALUE2="$(curl -s -m 60 -u 'admin:APIKEY' 'http://localhost:8080/jqs-monitoring/api/json' | jq -r '.buildQueue.numberOfJobs')"
        BUILD_ACTIVE_QUEUE_VALUE=$(( $BUILD_ACTIVE_QUEUE_VALUE1 + $BUILD_ACTIVE_QUEUE_VALUE2 ))
        
        TOTAL_EXECUTORS="$(curl -s -m 60 -u 'admin:APIKEY' 'http://localhost:8080/computer/api/json' | jq -r '.totalExecutors')"
        AVAILABLE_EXECUTORS=$(( $TOTAL_EXECUTORS - $BUILD_ACTIVE_QUEUE_VALUE ))
        
        aws cloudwatch put-metric-data --namespace JenkinsBuildActiveQueue --metric-name AvailableExecutors --value $AVAILABLE_EXECUTORS --dimensions AutoScalingGroupName=$AGENT_ASG --unit Count --region ${aws_region}

        sleep 15
      done
    permissions: "000700"
    owner: root
    group: root
  - path: /opt/cloudwatch-idle-executors.sh
    content: |
      #!/bin/bash

      for i in {1..3};
      do
        AGENT_ASG="$(aws autoscaling describe-auto-scaling-groups --region ${aws_region} | jq -r '.AutoScalingGroups[] | select(.AutoScalingGroupName | startswith("${application}-agent")) | .AutoScalingGroupName')"

        BUILD_ACTIVE_QUEUE_VALUE1="$(curl -s -m 60 -u 'admin:APIKEY' 'http://localhost:8080/computer/api/json' | jq -r '.busyExecutors')"
        BUILD_ACTIVE_QUEUE_VALUE2="$(curl -s -m 60 -u 'admin:APIKEY' 'http://localhost:8080/jqs-monitoring/api/json' | jq -r '.buildQueue.numberOfJobs')"
        BUILD_ACTIVE_QUEUE_VALUE=$(( $BUILD_ACTIVE_QUEUE_VALUE1 + $BUILD_ACTIVE_QUEUE_VALUE2 ))
        
        TOTAL_EXECUTORS="$(curl -s -m 60 -u 'admin:APIKEY' 'http://localhost:8080/computer/api/json' | jq -r '.totalExecutors')"
        
        if [ $TOTAL_EXECUTORS -gt ${executors_min} ] && [ $BUILD_ACTIVE_QUEUE_VALUE -eq 0 ]; then
          aws cloudwatch put-metric-data --namespace JenkinsBuildActiveQueue --metric-name IdleExecutors --value 0 --dimensions AutoScalingGroupName=$AGENT_ASG --unit Count --region ${aws_region}
        else
          aws cloudwatch put-metric-data --namespace JenkinsBuildActiveQueue --metric-name IdleExecutors --value 1 --dimensions AutoScalingGroupName=$AGENT_ASG --unit Count --region ${aws_region}
        fi

        sleep 15
      done
    permissions: "000700"
    owner: root
    group: root
  - path: /opt/wait_for_setup_done.sh
    content: |
      #!/bin/bash

      if [ ! -f "/var/lib/jenkins/setup_done.txt" ]; then
          until $(curl -s -m 60 -o /dev/null -I -f -u "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" http://localhost:8080/cli/);
          do
              printf ".";
              sleep 1;
          done
      fi
    permissions: "000700"
    owner: root
    group: root
  - path: /opt/api_key.sh
    content: |
      #!/bin/bash

      if [ ! -f "/var/lib/jenkins/api_key.txt" ]; then
          CRUMB=$(curl -c cookies.txt -s http://localhost:8080/crumbIssuer/api/json --user 'admin:${admin_password}' | jq -r .crumb)
          API_KEY=$(curl -b cookies.txt -s -X POST http://localhost:8080/me/descriptorByName/jenkins.security.ApiTokenProperty/generateNewToken --user 'admin:${admin_password}' --data newTokenName=agent-token -H "Jenkins-Crumb: $CRUMB" | jq -r .data.tokenValue)
          
          echo $API_KEY > /var/lib/jenkins/api_key.txt
          aws ssm put-parameter --name "${api_ssm_parameter}" --value "$(cat /var/lib/jenkins/api_key.txt)" --type "SecureString" --overwrite --region ${aws_region}
      fi

      sed -i -e "s@APIKEY@$(cat /var/lib/jenkins/api_key.txt)@" /opt/cloudwatch-busy-executors.sh
      sed -i -e "s@APIKEY@$(cat /var/lib/jenkins/api_key.txt)@" /opt/cloudwatch-idle-executors.sh
    permissions: "000700"
    owner: root
    group: root
  - path: /opt/auto-update-plugins.sh
    content: |
      #!/bin/bash

      echo "Looking for updates..."
      UPDATE_LIST=$( java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s http://admin:$(cat /var/lib/jenkins/api_key.txt)@127.0.0.1:8080/ list-plugins | grep -e ')$' | awk '{ print $1 }' > /var/lib/jenkins/plugin-updates/update-list.txt )

      if [ -s "/var/lib/jenkins/plugin-updates/update-list.txt" ]; then

        echo "Updates found!"
        echo "Updates:"
        cat "/var/lib/jenkins/plugin-updates/update-list.txt"

        echo "Installing plugins..."
        java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s http://admin:$(cat /var/lib/jenkins/api_key.txt)@127.0.0.1:8080/ install-plugin $(cat /var/lib/jenkins/plugin-updates/update-list.txt)

        echo "Rebooting Jenkins when all jobs finish..."
        java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s http://admin:$(cat /var/lib/jenkins/api_key.txt)@127.0.0.1:8080/ safe-restart
        
      else

        echo "No updates found." 
        echo "N/A" > /var/lib/jenkins/plugin-updates/update-list.txt

      fi
      
      echo "Archving files..."
      mv /var/lib/jenkins/plugin-updates/update-list.txt /var/lib/jenkins/plugin-updates/archive/update-list_$(date +%Y-%m-%d_%H%M%S).txt
    permissions: "000700"
    owner: root
    group: root
  - path: /etc/cron.d/cloudwatch-busy-executors
    content: |
      SHELL=/bin/bash
      PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
      MAILTO=root
      HOME=/
      * * * * * root /opt/cloudwatch-busy-executors.sh
    permissions: "000600"
    owner: root
    group: root
  - path: /etc/cron.d/cloudwatch-idle-executors
    content: |
      SHELL=/bin/bash
      PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
      MAILTO=root
      HOME=/
      * * * * * root /opt/cloudwatch-idle-executors.sh
    permissions: "000600"
    owner: root
    group: root
  - path: /etc/cron.d/auto-update-plugins
    content: |
      SHELL=/bin/bash
      PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
      MAILTO=root
      HOME=/
      ${auto_update_plugins_cron} root /opt/auto-update-plugins.sh
    permissions: "000600"
    owner: root
    group: root
  - path: /root/datadog-agent/jenkins/conf.yaml
    content: |
        logs:
        - type: tcp
          port: 10518
          service: ${jenkins_name}
          source: jenkins
        - type: file
          path: /var/log/jenkins/jenkins.log
          service: ${jenkins_name}
          source: jenkins          
    permissions: "000644"
    owner: root
    group: root 

  - path: /root/datadog-agent/system-probe.yaml
    content: |
      ##########################################
      ## Security Agent Runtime Configuration ##
      ##                                      ##
      ## Settings to send logs to Datadog are ##
      ## fetched from section `logs_config`   ##
      ## in datadog-agent.yaml                ##
      ##########################################

      runtime_security_config:
        ## @param enabled - boolean - optional - default: false
        ## Set to true to enable full Cloud Workload Security.
        #
        enabled: true

      remote_configuration:
        ## @param enabled - boolean - optional - default: false
        enabled: true

      ## @param fim_enabled - boolean - optional - default: false
      ## Set to true to only enable the File Integrity Monitoring feature.
      # fim_enabled: false
    permissions: "000644"
    owner: root
    group: root 

  - path: /root/datadog-agent/security-agent.yaml
    content: |
        ##########################################
        ## Security Agent Runtime Configuration ##
        ##                                      ##
        ## Settings to send logs to Datadog are ##
        ## fetched from section `logs_config`   ##
        ## in datadog-agent.yaml                ##
        ##########################################
        runtime_security_config:
          ## @param enabled - boolean - optional - default: false
          ## Set to true to enable the Security Runtime Module.
          #
          enabled: true

        compliance_config:
          ## @param enabled - boolean - optional - default: false
          ## Set to true to enable Linux compliance benchmarks.
          #
          enabled: true

          ## @param host_benchmarks - custom object - optional
          ## Linux compliance benchmarks.
          #
        host_benchmarks:
          ## @param enabled - boolean - optional - default: false
          ## Set to true to enable Linux compliance benchmarks.
          #
          enabled: true

        ## @param socket - string - optional - default: /opt/datadog-agent/run/runtime-security.sock
        ## The full path of the unix socket where the security runtime module is accessed.
        #
        # socket: /opt/datadog-agent/run/runtime-security.sock
    permissions: "000644"
    owner: root
    group: root 


  - path: /root/datadog-agent/jenkins/override.conf
    content: |
        [Service]
        Environment="JENKINS_LOG=/var/log/jenkins/jenkins.log"
    permissions: "000644"
    owner: root
    group: root 
  - path: /opt/dd_setup.sh
    content: |
      #!/bin/bash
      echo "Installing Datadog Agent with Jenkins Logs Enabled"
      DD_API_KEY=${dd_api_key} DD_HOSTNAME=${jenkins_name} DD_ENV=admin DD_SITE="datadoghq.eu" DD_APM_INSTRUMENTATION_ENABLED=host bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script_agent7.sh)"
      file_path="/etc/datadog-agent/datadog.yaml"
      sed -i 's/^# logs_enabled: false/logs_enabled: true/' "$file_path"
      mkdir /etc/datadog-agent/conf.d/jenkins.d
      mv /root/datadog-agent/jenkins/conf.yaml /etc/datadog-agent/conf.d/jenkins.d/conf.yaml
      mv /root/datadog-agent/system-probe.yaml /etc/datadog-agent/system-probe.yaml
      mv /root/datadog-agent/security-agent.yaml /etc/datadog-agent/security-agent.yaml
      sed -i 's/# compliance_config:/compliance_config:/' "$file_path"
      sed -i '/# compliance_config:/,/enabled/s/# enabled: false/enabled: true/' "$file_path"
      sed -i '$a\
      \
      runtime_security_config:\
        ## @param enabled - boolean - optional - default: false\
        ## Set to true to enable the Security Runtime Module.\
        #\
        enabled: true' "$file_path"
      systemctl restart datadog-agent
    permissions: "000700"
    owner: root
    group: root
  - path: /opt/jenkins_logs.sh
    content: |
      #!/bin/bash
      echo "Enabling Jenkins Operational Logs"
      mkdir /etc/systemd/system/jenkins.service.d
      chmod 755 /etc/systemd/system/jenkins.service.d
      mv /root/datadog-agent/jenkins/override.conf /etc/systemd/system/jenkins.service.d/override.conf
      chmod 644 /etc/systemd/system/jenkins.service.d/override.conf
      chmod o+rx /var/log/jenkins
      systemctl daemon-reload
    permissions: "000700"
    owner: root
    group: root





